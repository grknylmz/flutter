import 'constant.dart';
import 'dictionary.dart';

class Payment {
  String id;
  String code;
  DateTime date;
  bool approved;
  bool markOnRemove;
  String version;
  String comment;
  String note;
  String paymentDescription;
  String paymentPurpose;
  ResponsibilityCenter responsibilityCenter;
  ResponsibilityCenter disposalCenter;
  TypeOfPaymentTransaction typeOfPaymentTransaction;
  CashFlow cashFlow;
  BankAccount bankAccount;
  Responsible responsible;
  double documentTotal;
  Currency documentCurrency;
  Organization cashHolder;
  String terms;
  Currency budgetCurrency;
  double budgetInitial;
  double budgetClaim;
  double budgetLimit;
  double budgetBalance;
  Counterparty accountingCodes01;
  Contract accountingCodes02;
  TypeOfPayment accountingCodes03;
  String accountingCodes04;
  String accountingCodes05;
  String accountingCodes06;
  String accountingCodes07;
  Tax accountingCodes08;
  String accountingCodes09;
  String accountingCodes10;
  String accountingCodes11;
  String accountingCodes12;
  SightingState sightingState;
  String sightingData;
  String paymentOrder;
  double paymentTotal;
  Currency paymentCurrency;
  DateTime paymentDate;
  int paymentPercentage;
  DateTime lastPaymentDate;
  bool isPaymentsList;
  bool isPaymentsLimit;
  bool isVising;
  bool isClosed;
  int numberOfAttachments;
  DocumentType type;

  Payment();
  Payment.fromJSON(Map<String, dynamic> parsedJson) {
    id = parsedJson['id'] ?? "";
    code = parsedJson['code'] ?? "";
    date = DateTime.parse(parsedJson['date']) ?? new DateTime(1);
    approved = parsedJson['approved'] ?? false;
    markOnRemove = parsedJson['markOnRemove'] ?? false;
    version = parsedJson['version'] ?? "";
    comment = parsedJson['comment'] ?? "";
    note = parsedJson['note'] ?? "";
    paymentDescription = parsedJson['paymentDescription'] ?? "";
    paymentPurpose = parsedJson['paymentPurpose'] ?? "";
    responsibilityCenter = ResponsibilityCenter.fromJSON(parsedJson['responsibilityCenter']);
    disposalCenter = ResponsibilityCenter.fromJSON(parsedJson['disposalCenter']);
    typeOfPaymentTransaction = TypeOfPaymentTransaction.fromJSON(parsedJson['typeOfPaymentTransaction']);
    cashFlow = CashFlow.fromJSON(parsedJson['cashFlow']);
    bankAccount = BankAccount.fromJSON(parsedJson['bankAccount']);
    responsible = Responsible.fromJSON(parsedJson['responsible']);
    documentTotal = (parsedJson['documentTotal'] ?? 0) + .0;
    documentCurrency = Currency.fromJSON(parsedJson['documentCurrency']);
    cashHolder = Organization.fromJSON(parsedJson['cashHolder']);
    terms = parsedJson['terms'] ?? "";
    budgetCurrency = Currency.fromJSON(parsedJson['budgetCurrency']);
    budgetInitial = (parsedJson['budgetInitial'] ?? 0) + .0;
    budgetClaim = (parsedJson['budgetClaim'] ?? 0) + .0;
    budgetLimit = (parsedJson['budgetLimit'] ?? 0) + .0;
    budgetBalance = (parsedJson['budgetBalance'] ?? 0) + .0;
    accountingCodes01 = Counterparty.fromJSON(parsedJson['accountingCodes01']);
    accountingCodes02 = Contract.fromJSON(parsedJson['accountingCodes02']);
    accountingCodes03 = TypeOfPayment.fromJSON(parsedJson['accountingCodes03']);
    accountingCodes04 = parsedJson['accountingCodes04'] ?? "";
    accountingCodes05 = parsedJson['accountingCodes05'] ?? "";
    accountingCodes06 = parsedJson['accountingCodes06'] ?? "";
    accountingCodes07 = parsedJson['accountingCodes07'] ?? "";
    accountingCodes08 = Tax.fromJSON(parsedJson['accountingCodes08']);
    accountingCodes09 = parsedJson['accountingCodes09'] ?? "";
    accountingCodes10 = parsedJson['accountingCodes10'] ?? "";
    accountingCodes11 = parsedJson['accountingCodes11'] ?? "";
    accountingCodes12 = parsedJson['accountingCodes12'] ?? "";
    sightingState = SightingState.fromJSON(parsedJson['sightingState']);
    sightingData = parsedJson['sightingData'] ?? "";
    paymentOrder = null; // Платежный ордер, пока не вывожу
    paymentTotal = (parsedJson['paymentTotal'] ?? 0) + .0;
    paymentCurrency = Currency.fromJSON(parsedJson['paymentCurrency']);
    paymentDate = DateTime.parse(parsedJson['paymentDate']) ?? DateTime(1);
    paymentPercentage = parsedJson['paymentPercentage'] ?? 0;
    lastPaymentDate = DateTime.parse(parsedJson['lastPaymentDate']) ?? DateTime(1);
    isPaymentsList = parsedJson['isPaymentsList'];
    isPaymentsLimit = parsedJson['isPaymentsLimit'];
    isVising = parsedJson['isVising'];
    isClosed = parsedJson['isClosed'];
    numberOfAttachments = parsedJson['numberOfAttachments'] ?? 0;
    type = DocumentType.fromJSON(parsedJson['type']);
  }

}